//////////////////// Copyright ///////////////////////// {{{1

//
// Copyright (c) 2010, Roland Kaminski <kaminski@cs.uni-potsdam.de>
//
// This file is part of aspcud.
//
// aspcud is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// aspcud is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with aspcud.  If not, see <http://www.gnu.org/licenses/>.
//

//////////////////// Preamble ////////////////////////// {{{1

#include <cudf/critparser.h>
#include <stdexcept>
#include "critparser_impl.h"
#include <cassert>

void *critparserAlloc(void *(*mallocProc)(size_t));
void critparserFree(void *p, void (*freeProc)(void*));
void critparser(void *yyp, int yymajor, CritParser::Token yyminor, CritParser *pParser);

//////////////////// CritParser //////////////////////////// {{{1

CritParser::CritParser(Criteria::CritVec &crits)
    : crits_(crits) 
    , parser_(critparserAlloc(malloc)) 
    , error_(false) { }

/*!re2c
    ADD  = "+";
    SUB  = "-";
    ATTR = [a-z][a-z0-9\-]*;
    EOF  = [\000];
    ANY  = [\001-\377];
*/

int CritParser::lex() {
    for(;;) {
        start();
        /*!re2c
            EOF                { return 0; }
            ","                { return PARSER_COMMA; }
            "-"                { token_.maximize = false; return PARSER_SIGN; }
            "+"                { token_.maximize = true;  return PARSER_SIGN; }
            "("                { return PARSER_LPAREN; }
            ")"                { return PARSER_RPAREN; }
            "solution"         { return PARSER_SOLUTION; }
            "changed"          { return PARSER_CHANGED; }
            "new"              { return PARSER_NEW; }
            "removed"          { return PARSER_REMOVED; }
            "up"               { return PARSER_UP; }
            "down"             { return PARSER_DOWN; }
            "installrequest"   { return PARSER_INSTALLREQUEST; }
            "upgraderequest"   { return PARSER_UPGRADEREQUEST; }
            "request"          { return PARSER_REQUEST; }
            "count"            { return PARSER_COUNT; }
            "sum"              { return PARSER_SUM; }
            "notuptodate"      { return PARSER_NOTUPTODATE; }
            "unsat_recommends" { return PARSER_UNSAT_RECOMMENDS; }
            "aligned"          { return PARSER_ALIGNED; }
            ATTR               { token_.string = &string(string()); return PARSER_ATTR; }
            ANY                { syntaxError(); return 0; }
        */
    }
    return 0;
}

void CritParser::parseError() {
    error_ = true;
}

std::string CritParser::errorToken() {
    if(eof()) return "<EOF>";
    else return string();
}

void CritParser::syntaxError() {
    error_    = true;
    errorStr_ = "syntax error:" + errorToken();
}

bool CritParser::parse(std::istream &in) {
    reset(&in);
    for (int token = lex(); token != 0 && !error_; token = lex()) {
        if (!error_) {
            //std::cerr << "lexed: '" << string() << "' (" << token << ")" << std::endl;
            critparser(parser_, token, token_, this);
        }
    }
    if (!error_) { critparser(parser_, 0, token_, this); }
    return !error_;
}

Criterion &CritParser::pushCrit(Criterion::Measurement m, Criterion::Selector s, std::string const *a1, std::string const *a2) {
    crits_.push_back(Criterion());
    crits_.back().optimize    = false;
    crits_.back().measurement = m;
    crits_.back().selector    = s;
    if (a1) { crits_.back().attr1 = *a1; }
    if (a2) { crits_.back().attr2 = *a2; }
    return crits_.back();
}

std::string const &CritParser::string(std::string const &x) {
    return *strings_.insert(x).first;
}

CritParser::~CritParser() {
    critparserFree(parser_, free);
}

